{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7744545,"sourceType":"datasetVersion","datasetId":4497132}],"dockerImageVersionId":30673,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nikolas10/heart-disease-analysis?scriptVersionId=169800361\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# ***Heart Disease Dataset Analysis***","metadata":{}},{"cell_type":"code","source":"# Import Libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-04-01T20:05:30.40576Z","iopub.execute_input":"2024-04-01T20:05:30.406174Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"This dataset contains medical and behavioral information used to predict the risk of heart disease. It is highly useful for research and machine learning in the health field.\n\nThis dataset can be used for various data analysis and machine learning projects, such as:\n\n- Creating predictive models for diagnosing heart disease.\n- Determining the major risk factors for heart disease.\n- Understanding the relationship between different variables and heart disease.","metadata":{}},{"cell_type":"markdown","source":"### **Loading the dataset**","metadata":{}},{"cell_type":"code","source":"hd_df = pd.read_csv(\"/kaggle/input/heart-disease-dataset/Dataset Heart Disease.csv\") \nhd_df.drop('Unnamed: 0', axis=1, inplace=True)\nhd_df","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### **EDA**","metadata":{}},{"cell_type":"code","source":"hd_df.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"All variable in the dataset are numeric.","metadata":{}},{"cell_type":"code","source":"hd_df.describe().T","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in hd_df.select_dtypes('number').columns:\n    print(f'Kurosis and Simetry of {col}')\n    print(f'kurtosis: {hd_df[col].kurt()}, Assimetry: {hd_df[col].skew()}')\n    print()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(dpi=110)\nsns.set_style('darkgrid')\n\nage_dist = sns.histplot(data=hd_df, x='age', kde=True, bins= 20)\nage_dist.set_xlabel(\"Age\")\nage_dist.set_title('Age distribution');","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### **Preprocessing**\n\n1. Check for Nulls\n2. Check for Out of range values\n3. Check for duplicates","metadata":{}},{"cell_type":"code","source":"hd_df.isna().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"There are no null values.","metadata":{}},{"cell_type":"code","source":"fig, ax = plt.subplots(dpi=110)\n\nchol = sns.boxplot(data=hd_df, x='target', y='cholesterol', palette='magma')\nchol.set_xlabel(\"Target\")\nchol.set_ylabel(\"Cholesterol\");","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(2, dpi=110, figsize=(8,10))\n\nmax_heart = sns.scatterplot(x=hd_df['age'], y=hd_df['max heart rate'], ax=ax[0])\nmax_heart.set_title('Max heart rate by age');\n\nrest = sns.scatterplot(x=hd_df['age'], y=hd_df['resting bps'], ax=ax[1])\nrest.set_title('resting bps by age');","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"It does not seem to be outliers.","metadata":{}},{"cell_type":"code","source":"hd_df.duplicated().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"There are no duplicates.","metadata":{}},{"cell_type":"markdown","source":"### **Data analysis**","metadata":{}},{"cell_type":"code","source":"fig, ax = plt.subplots(figsize=(8,6), dpi=90)\n\nsns.heatmap(hd_df.corr(), cmap='viridis', linecolor='white', linewidths=1, annot=True, fmt='.2f', vmin=-1);","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(dpi=110)\n\nchol_age = sns.scatterplot(data=hd_df, x='age', y='cholesterol', hue='target', palette='Set1')\nchol_age.set_xlabel(\"Age\")\nchol_age.set_title('Cholesterol by Age');","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"There are no significant differences between the cholesterol and age, also no correlation with target.","metadata":{}},{"cell_type":"code","source":"fig, ax = plt.subplots(dpi=110)\n\nchest = sns.countplot(data=hd_df, x='chest pain type', hue='target', palette='magma')\nchest.set_title('Chest pain type');","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Chest pain type is a clear indicator that someone may suffer a heart disease, for chest pain types of 1, 2 and 3 there are more people without heart disease, however, for chest pain type 4 there is a huge gap for people that suffer the disease which is clearly mayority.","metadata":{}},{"cell_type":"markdown","source":"### **Machine Learning**","metadata":{}},{"cell_type":"markdown","source":"Predict heart disease, this is a supervised learning problem.","metadata":{}},{"cell_type":"code","source":"import sklearn\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn import tree","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = hd_df.drop(columns='target')\ncol = hd_df.drop(columns='target')\ny = hd_df['target']\n\nX = X.values\ny = y.values","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Preprocessing","metadata":{}},{"cell_type":"markdown","source":"All values are numerical, therefore One hot encoder is not needed.","metadata":{}},{"cell_type":"code","source":"scaler = preprocessing.MinMaxScaler(feature_range=(0, 1))\nX_scaled = scaler.fit_transform(X)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for i in range(3):\n    print(f\"original {X[i]}\")\n    print(f'scaled {X_scaled[i]}')\n    print()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Data Partition and training","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X_scaled,\n                                                    y,\n                                                    test_size= 0.3)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Create the model\ndt = tree.DecisionTreeClassifier(max_depth=4)\n\n#Train the model\ndt.fit(X_train, y_train)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Accuracy and Prediction","metadata":{}},{"cell_type":"code","source":"y_pred = dt.predict(X_test)\n\nfor i in range(5,25,3):\n    print(f'Real value: {y_test[i]}, predicted value: {round(y_pred[i])}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"accuracy = metrics.accuracy_score(y_pred, y_test)\nprint(f'accuracy of the model is: {round(accuracy,3)}')\nprint(f'error of the model is: {round(1-accuracy,3)}')\nprint(f'F1 score: {round(metrics.f1_score(y_test, y_pred, pos_label=1),3)}')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(dpi=110, figsize=(30,30))\n\ntree.plot_tree(dt,\n          feature_names= col.columns,\n          impurity = False,\n          node_ids = True,\n          proportion = True,\n          rounded = True,\n          precision = 2);","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(dpi=110)\n\nimp = pd.Series(dt.feature_importances_,index = col.columns).sort_values(ascending = False).plot(kind='bar');\nimp.set_ylabel(\"Importance\")\nimp.set_title('Feature Importance');","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}